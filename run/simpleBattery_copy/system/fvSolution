/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     5.0                                |
|   \\  /    A nd           | Web:         http://www.foam-extend.org         |
|    \\/     M anipulation  | For copyright notice see file Copyright         |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSolution;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

solvers
{
    "p|pd|pdFinal|Voltage"
    {
        solver            amgSolver;
        cycle             V-cycle;
//        policy            selectionAMG;
        policy            cluster;
        nPreSweeps        1;
        nPostSweeps       3;
        groupSize         8;
        minCoarseEqns     4;
        nMaxLevels        100;
        scale             on;
        smoother          ILUC0;

        minIter           1;
        maxIter           20;
        tolerance         1e-8;
        relTol            0.0;
    }
    "(U|UFinal)"
    {
        solver            BiCGStab;
        preconditioner    ILU0;

        minIter           1;
        maxIter           500;
        tolerance         1e-8;
        relTol            0.0;
    }
    "k|epsilon"
    {
        solver          BiCGStab;
        preconditioner    ILU0;

        minIter           1;
        maxIter           500;
        tolerance         1e-8;
        relTol            0.0;
    }
}

PISO
{
    cAlpha          1;
}
PIMPLE
{
    nOuterCorrectors    6;
    nCorrectors         4;
    nNonOrthogonalCorrectors 0;
    pdRefCell 0;
    pdRefValue 0;
}

relaxationFactors
{
    equations
    {
        U        0.9;
        UFinal   0.9;
    }
    fields
    {
        pd       1;
    }
}

isoAdvector
{
    // Note: use full Crank-Nicolson when topo changes are not occuring,
    // otherwise the code resorts to Euler implicit
//    CrankNicolsonCoeff 0.5;

    // Euler implicit
    CrankNicolsonCoeff 1;

    gradAlphaNormal true;

    alphaFluxTolerance 1e-12; // 10*SMALL by default

    // Determines which cells are classified as surface cells
    vof2IsoTol         1e-8; // 1e-8 by default

    clipAlphaTol 1e-6;
    nAlphaBounds 0;
    snapAlpha   false; // true
    extrapolateVelocity yes;
    secondOrderExtrapolation no;
}

// ************************************************************************* //
