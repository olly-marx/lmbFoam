#!/bin/sh
# Source tutorial run functions
. $WM_PROJECT_DIR/bin/tools/RunFunctions

application="conjugateLmbFoam"
out=$1
if [ "$out" = "-loud" ]; then
	# fluid
	blockMesh
	setSet -batch setSet-fluid.batch
	setsToZones
	setF=$3
	if [ "$setF" = "-setFields" ]; then
		setFields
	else
		rm 0/alpha1
		rm 0/alpha1.gz
		# Get the value of LxLy (line 4 of meshProperties, format: 
		# LxLy 0.1;)
		LxLy=`sed -n '4p' system/meshProperties | awk '{print $2}'`
		# Cut the ; off the end
		LxLy=${LxLy%;}
		# Copy the corresponding file
		echo "Copying init/R$LxLy.gz to 0/alpha1.gz"
		cp init/R$LxLy.gz 0/alpha1.gz
	fi

	#solid
	blockMesh -region solid
	setSet -region solid -batch setSet-solid.batch
	setsToZones -region solid

	mv constant/polyMesh constant/polyMesh-fluid
	mv constant/solid/polyMesh constant/polyMesh

	sed -i 's/region0/fluid/g' constant/polyMesh/boundary
	splitPatch -overwrite
	mv system/splitPatchDict system/splitPatchDict1
	mv system/splitPatchDict2 system/splitPatchDict
	splitPatch -overwrite
	mv system/splitPatchDict system/splitPatchDict2
	mv system/splitPatchDict1 system/splitPatchDict
	sed -i 's/fluid/region0/g' constant/polyMesh/boundary

	mv constant/polyMesh constant/solid/polyMesh
	mv constant/polyMesh-fluid constant/polyMesh

	arg=$2
	if [ "$arg" = "-prepare" ]; then
		tput bel
		exit 0
	elif [ "$arg" = "-serial" ]; then
		#runApplication -l log.$application $application
		$application
		tput bel
		exit 0
	elif [ "$arg" = "-parallel" ]; then
		decomposePar
		decomposePar -region solid
		mpirun -np 8 $application -parallel | tee log.$application
		tput bel
		reconstructPar
		reconstructPar -region solid
		tput bel
		exit 0
	else
		echo "Usage: $0 [-loud / -quiet] [-prepare / -serial / -parallel]"
		echo "       -loud:    run all with verbose output"
		echo "       -quiet:   run all with no output, push to log files"
		echo "       -prepare: prepare case for running but don't run"
		echo "       -serial:  run in serial"
		echo "       -parallel:run in parallel"
		tput bel
		exit 1
	fi
elif [ "$out" = "-quiet" ]; then
	# fluid
	runApplication -l log.blockMesh-fluid blockMesh
	runApplication -l log.setSet-fluid setSet -batch setSet-fluid.batch
	runApplication -l log.setsToZones-fluid setsToZones
	setF=$3
	if [ "$setF" = "-setFields" ]; then
		runApplication setFields
	else
		rm 0/alpha1
		rm 0/alpha1.gz
		# Get the value of LxLy (line 4 of meshProperties, format: 
		# LxLy 0.1;)
		LxLy=`sed -n '4p' system/meshProperties | awk '{print $2}'`
		# Cut the ; off the end
		LxLy=${LxLy%;}
		# Copy the corresponding file
		echo "Copying init/R$LxLy.gz to 0/alpha1.gz"
		cp init/R$LxLy.gz 0/alpha1.gz
	fi

	#solid
	runApplication -l log.blockMesh-solid blockMesh -region solid
	runApplication -l log.setSet-solid setSet -region solid -batch setSet-solid.batch
	runApplication -l log.setsToZones-solid setsToZones -region solid

	mv constant/polyMesh constant/fluid/polyMesh
	mv constant/solid/polyMesh constant/polyMesh

	sed -i 's/region0/fluid/g' constant/polyMesh/boundary
	runApplication -l log.splitPatchOuter splitPatch -overwrite
	mv system/splitPatchDict system/splitPatchDict1
	mv system/splitPatchDict2 system/splitPatchDict
	runApplication -l log.splitPatchTop splitPatch -overwrite
	mv system/splitPatchDict system/splitPatchDict2
	mv system/splitPatchDict1 system/splitPatchDict
	sed -i 's/fluid/region0/g' constant/polyMesh/boundary

	mv constant/polyMesh constant/solid/polyMesh
	mv constant/fluid/polyMesh constant/polyMesh

	arg=$2
	if [ "$arg" = "-prepare" ]; then
		tput bel
		exit 0
	elif [ "$arg" = "-serial" ]; then
		#runApplication -l log.$application $application
		runApplication -l log.$application $application
		tput bel
		exit 0
	elif [ "$arg" = "-parallel" ]; then
		runApplication -l log.decomposePar-fluid decomposePar
		runApplication -l log.decomposePar-solid decomposePar -region solid
		echo "Running $application in parallel"
		mpirun -np 8 $application -parallel > log.$application
		tput bel
		runApplication -l log.reconstructPar-fluid reconstructPar
		runApplication -l log.reconstructPar-solid reconstructPar -region solid
		tput bel
		exit 0
	else
		echo "Usage: $0 [-loud / -quiet] [-prepare / -serial / -parallel]"
		echo "       -loud:    run all with verbose output"
		echo "       -quiet:   run all with no output, push to log files"
		echo "       -prepare: prepare case for running but don't run"
		echo "       -serial:  run in serial"
		echo "       -parallel:run in parallel"
		tput bel
		exit 1
	fi
else
	# fluid
	blockMesh > log.blockMesh-fluid
	setSet -batch setSet-fluid.batch > log.setSet-fluid
	setsToZones > log.setsToZones
	setFields > log.setFields

	#solid
	blockMesh -region solid > log.blockMesh-solid
	setSet -region solid -batch setSet-solid.batch > log.setSet-solid
	setsToZones -region solid > log.setsToZones-solid

	mv constant/polyMesh constant/polyMesh-fluid
	mv constant/solid/polyMesh constant/polyMesh

	sed -i 's/region0/fluid/g' constant/polyMesh/boundary
	splitPatch -overwrite > log.splitPatchOuter
	mv system/splitPatchDict system/splitPatchDict1
	mv system/splitPatchDict2 system/splitPatchDict
	splitPatch -overwrite > log.splitPatchTop
	mv system/splitPatchDict system/splitPatchDict2
	mv system/splitPatchDict1 system/splitPatchDict
	sed -i 's/fluid/region0/g' constant/polyMesh/boundary

	mv constant/polyMesh constant/solid/polyMesh
	mv constant/polyMesh-fluid constant/polyMesh

	arg=$2
	if [ "$arg" = "-prepare" ]; then
		tput bel
		exit 0
	elif [ "$arg" = "-serial" ]; then
		#runApplication -l log.$application $application
		$application > log.$application
		tput bel
		exit 0
	elif [ "$arg" = "-parallel" ]; then
		decomposePar > log.decomposePar
		decomposePar -region solid > log.decomposePar-solid
		mpirun -np 8 $application -parallel > log.$application
		tput bel
		reconstructPar
		reconstructPar -region solid
		tput bel
		exit 0
	else
		echo "Usage: $0 [-loud / -quiet] [-prepare / -serial / -parallel]"
		echo "       -loud:    run all with verbose output"
		echo "       -quiet:   run all with no output, push to log files"
		echo "       -prepare: prepare case for running but don't run"
		echo "       -serial:  run in serial"
		echo "       -parallel:run in parallel"
		tput bel
		exit 1
	fi
fi

# Take arguments from the command line to see whether we should
# run or not
# -prepare: prepare case for running but don't run
# -serial: run in serial
# -parallel: run in parallel
